#! /usr/bin/env python3

"""
Trabalho 1 da disciplina Seguranca Computacional - CIC

Autores: Luiz Carlos Schonarth Junior
         Bruno Fernandes Teixeira

Universidade de Brasilia
"""

import sys, getopt 
from string import ascii_lowercase

ALPHABET = ascii_lowercase
MATRIX = [[ALPHABET[(i+j) % 26] for j in range(len(ALPHABET)) ] for i in range(len(ALPHABET))]
CHAR_IDX = {x: y for y, x in enumerate(ALPHABET)}

def vigenere_cipher(plaintext: str, secret: str) -> str:
    ciphertext = ""
    i = 0
    for text_char in plaintext.lower():
        if text_char not in ALPHABET:
            ciphertext += text_char
            continue

        secret_idx = i % len(secret)
        secret_char = secret[secret_idx]
        x, y = CHAR_IDX[secret_char], CHAR_IDX[text_char]

        encoded_char = MATRIX[x][y]
        ciphertext += encoded_char
        i += 1

    return ciphertext

def vigenere_decipher(ciphertext: str, secret: str) -> str:
    plaintext = ""
    return plaintext

def main():
    # Parse command line arguments
    try:
        opts, args = getopt.getopt(sys.argv[1:], "k:cd", ["key=", "cipher", "decipher"])
    except getopt.GetoptError as err:
        print(err) 
        sys.exit(1)
    key = '';
    cipher = True
    for o, a in opts:
        if o in ('-k', '--key'):
            key = a
        elif o in ('-c', '--cipher'):
            cipher = True
        elif o in ('-d', '--decipher'):
            cipher = False
        else:
            print("ERROR: Unhadled option.", file=sys.stderr)
            sys.exit(1)

    if not key:
        key = input("Key: ")

    if not key.isalpha():
        print("ERROR: Key must be alphabetical.", file=sys.stderr)
        sys.exit(1)

    text = sys.stdin.read()
    print(text)

    if cipher:
        res = vigenere_cipher(text, key)
        print(res)
    else:
        res = vigenere_decipher(text, key)
        print(res)

if __name__ == "__main__":
    main()
